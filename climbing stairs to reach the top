def countWays(n):

   
    if n == 0 or n == 1:
        return 1

    return countWays(n - 1) + countWays(n - 2)

n = 4
print(countWays(n))


def countWaysRec(n, memo):
  
    
    if n == 0 or n == 1:
        return 1

    
    if memo[n] != -1:
        return memo[n]

    memo[n] = countWaysRec(n - 1, memo) + countWaysRec(n - 2, memo)
    return memo[n]

def countWays(n):
  
    
    memo = [-1] * (n + 1)
    return countWaysRec(n, memo)

if __name__ == "__main__":
    n = 4
    print(countWays(n))

def countWays(n):
    dp = [0] * (n + 1)
  
    # Base cases
    dp[0] = 1
    dp[1] = 1

    for i in range(2, n + 1):
        dp[i] = dp[i - 1] + dp[i - 2]; 
  
    return dp[n]

n = 4
print(countWays(n))

def countWays(n):
  
    prev1 = 1
    prev2 = 1
  
    for i in range(2, n + 1):
        curr = prev1 + prev2
        prev2 = prev1
        prev1 = curr
  
    
    return prev1

n = 4
print(countWays(n))
